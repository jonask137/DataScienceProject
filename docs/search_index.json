[["index.html", "Data Science Project setup", " Data Science Project setup All the output formatting is done in the _output.yml file while all bookdown rendering options is done in the _bookdown.yml file.ยง library(bookdown) Tips and tricks Referencing This is making a figure with a caption and where we center the figure and set the size. Notice, that the figure is automatically numbered according to the chapter number. plot(pressure,type = &#39;b&#39;,pch = 19) Figure 0.1: A fig Now we are able to make a reference to the chunk. Refer to a chunk: 0.1 Options RMarkdown Reference Guide "],["introduction.html", "1 Introduction", " 1 Introduction "],["network-analysis.html", "2 Network Analysis ", " 2 Network Analysis "],["basics.html", "2.1 Basics", " 2.1 Basics The following is based on the file 1 - Basics 2.1.1 Preliminaries # Loading the necessary libraries: library(sna) # sna stands for social network analysis. This library contains several routines for analysing networks. # See the user guide for more information: https://cran.r-project.org/web/packages/sna/sna.pdf 2.1.2 Creating a network from an adjacency matrix # A random graph is a graph where the vertices are fixed, but the edges are drawn randomly and # independently from a Bernoulli distribution. # Create an adjacency matrix for a single (m = 1) random graph with n vertices and edge probability tprob: A &lt;- rgraph(n=10 #Number of vertices ,m=1 #Number of matrices to be made ,tprob=.25) #Probability of an edge # Convert the adjacency matrix into a network object: net_1 &lt;- network(A, directed=TRUE, loops=FALSE, bipartite=FALSE, matrix.type=&quot;adjacency&quot;) # We can also just use the defaults and write: net_1 &lt;- network(A) # Summarise information about our network: summary(net_1) ## Network attributes: ## vertices = 10 ## directed = TRUE ## hyper = FALSE ## loops = FALSE ## multiple = FALSE ## bipartite = FALSE ## total edges = 23 ## missing edges = 0 ## non-missing edges = 23 ## density = 0.2555556 ## ## Vertex attributes: ## vertex.names: ## character valued attribute ## 10 valid vertex names ## ## No edge attributes ## ## Network adjacency matrix: ## 1 2 3 4 5 6 7 8 9 10 ## 1 0 0 0 0 1 0 0 0 1 1 ## 2 0 0 0 0 1 0 0 0 1 0 ## 3 0 0 0 1 0 0 0 1 0 0 ## 4 0 0 1 0 0 0 1 0 0 0 ## 5 0 0 1 0 0 1 0 1 0 0 ## 6 0 1 0 1 0 0 0 0 0 0 ## 7 1 0 0 0 0 0 0 0 1 0 ## 8 0 0 1 0 0 0 1 0 0 0 ## 9 1 0 0 1 0 1 0 1 0 0 ## 10 0 0 0 0 1 0 0 0 0 0 # A simple plot of the network: plot(net_1) 2.1.3 Creating a network from an edge list # Setting the random seed for reproducibility: set.seed(1) # &quot;Random&quot; numbers generated by a computer are not really random, but they can seem to be to humans. # By setting the random &quot;seed&quot;, we fix the sequence of random numbers. The next random graph we # create will be the same upon repeated runs of this script. # We can also use rgraph to create an edge list: el &lt;- rgraph(n=10, m=1, tprob=.25, return.as.edgelist=T) # The edge list is an [m x 3] matrix where m is the number of edges. The first column is the vertex # the edge originates at, the second the vertex it terminates at and the final one the weight: el ## [,1] [,2] [,3] ## [1,] 7 10 1 ## [2,] 6 10 1 ## [3,] 7 9 1 ## [4,] 6 9 1 ## [5,] 2 9 1 ## [6,] 1 9 1 ## [7,] 10 8 1 ## [8,] 6 8 1 ## [9,] 4 7 1 ## [10,] 9 6 1 ## [11,] 6 5 1 ## [12,] 2 5 1 ## [13,] 1 5 1 ## [14,] 5 4 1 ## [15,] 8 3 1 ## [16,] 6 3 1 ## [17,] 4 3 1 ## [18,] 8 2 1 ## [19,] 7 2 1 ## [20,] 6 1 1 ## [21,] 4 1 1 ## attr(,&quot;n&quot;) ## [1] 10 # We can create, plot and summarise this network as before: net_2 &lt;- network(el, directed=TRUE, loops=FALSE, bipartite=FALSE, matrix.type=&quot;edgelist&quot;) summary(net_2) ## Network attributes: ## vertices = 10 ## directed = TRUE ## hyper = FALSE ## loops = FALSE ## multiple = FALSE ## bipartite = FALSE ## total edges = 21 ## missing edges = 0 ## non-missing edges = 21 ## density = 0.2333333 ## ## Vertex attributes: ## vertex.names: ## character valued attribute ## 10 valid vertex names ## ## No edge attributes ## ## Network adjacency matrix: ## 1 2 3 4 5 6 7 8 9 10 ## 1 0 0 0 0 1 0 0 0 1 0 ## 2 0 0 0 0 1 0 0 0 1 0 ## 3 0 0 0 0 0 0 0 0 0 0 ## 4 1 0 1 0 0 0 1 0 0 0 ## 5 0 0 0 1 0 0 0 0 0 0 ## 6 1 0 1 0 1 0 0 1 1 1 ## 7 0 1 0 0 0 0 0 0 1 1 ## 8 0 1 1 0 0 0 0 0 0 0 ## 9 0 0 0 0 0 1 0 0 0 0 ## 10 0 0 0 0 0 0 0 1 0 0 plot(net_2) # We can also use the shorter version, as the network command automatically infers that this is an edge list: net_2 &lt;- network(el) 2.1.4 Examining properties of network objects # We can report various properties of our network: is.network(net_2) # Is it a network? ## [1] TRUE is.bipartite(net_2) # Is it bipartite? ## [1] FALSE is.directed(net_2) # Is it directed? ## [1] TRUE has.loops(net_2) # Are loops allowed? ## [1] FALSE network.size(net_2) # What is the number of vertices, order of the network (as mentioned in the slides this is also sometimes called size)? ## [1] 10 network.edgecount(net_2) # What is the number of edges? ## [1] 21 # We can also access and modify particular edges: #Notice, that we are merely looking up the adjacency matrix summary(net_2) ## Network attributes: ## vertices = 10 ## directed = TRUE ## hyper = FALSE ## loops = FALSE ## multiple = FALSE ## bipartite = FALSE ## total edges = 21 ## missing edges = 0 ## non-missing edges = 21 ## density = 0.2333333 ## ## Vertex attributes: ## vertex.names: ## character valued attribute ## 10 valid vertex names ## ## No edge attributes ## ## Network adjacency matrix: ## 1 2 3 4 5 6 7 8 9 10 ## 1 0 0 0 0 1 0 0 0 1 0 ## 2 0 0 0 0 1 0 0 0 1 0 ## 3 0 0 0 0 0 0 0 0 0 0 ## 4 1 0 1 0 0 0 1 0 0 0 ## 5 0 0 0 1 0 0 0 0 0 0 ## 6 1 0 1 0 1 0 0 1 1 1 ## 7 0 1 0 0 0 0 0 0 1 1 ## 8 0 1 1 0 0 0 0 0 0 0 ## 9 0 0 0 0 0 1 0 0 0 0 ## 10 0 0 0 0 0 0 0 1 0 0 net_2[3,5] # The edge from vertex 3 to vertex 5 (not present). ## [1] 0 net_2[1:3,1:3] # A submatrix of the adjacency. ## 1 2 3 ## 1 0 0 0 ## 2 0 0 0 ## 3 0 0 0 net_2[3,5] &lt;- 1 # Adding and edge from vertex 3 to 5. net_2[1,] &lt;- 1 # Set edges from vertex 1 to all other vertices. summary(net_2) ## Network attributes: ## vertices = 10 ## directed = TRUE ## hyper = FALSE ## loops = FALSE ## multiple = FALSE ## bipartite = FALSE ## total edges = 29 ## missing edges = 0 ## non-missing edges = 29 ## density = 0.3222222 ## ## Vertex attributes: ## vertex.names: ## character valued attribute ## 10 valid vertex names ## ## No edge attributes ## ## Network adjacency matrix: ## 1 2 3 4 5 6 7 8 9 10 ## 1 0 1 1 1 1 1 1 1 1 1 ## 2 0 0 0 0 1 0 0 0 1 0 ## 3 0 0 0 0 1 0 0 0 0 0 ## 4 1 0 1 0 0 0 1 0 0 0 ## 5 0 0 0 1 0 0 0 0 0 0 ## 6 1 0 1 0 1 0 0 1 1 1 ## 7 0 1 0 0 0 0 0 0 1 1 ## 8 0 1 1 0 0 0 0 0 0 0 ## 9 0 0 0 0 0 1 0 0 0 0 ## 10 0 0 0 0 0 0 0 1 0 0 # Notice that [1,1] remained 0 after the final modification, because we set loops to false. # Similarly, networks with directed set to false will be symmetrised. # We can also add vertices and edges with these commands: add.vertices(net_2, 2) add.edges(net_2, 11,12) # And we can delete them: get.edgeIDs(net_2, 11) ## [1] 30 delete.edges(net_2, get.edgeIDs(net_2, 11)) delete.vertices(net_2, 11) delete.vertices(net_2, 11) 2.1.5 Attributes of networks, vertices and edges # List the attributes of our network: list.network.attributes(net_2) ## [1] &quot;bipartite&quot; &quot;directed&quot; &quot;hyper&quot; &quot;loops&quot; &quot;mnext&quot; &quot;multiple&quot; ## [7] &quot;n&quot; # We can then get the values a particular attribute: get.network.attribute(net_2, &quot;bipartite&quot;) ## [1] FALSE get.network.attribute(net_2, list.network.attributes(net_2)[2]) ## [1] TRUE # Similary, vertex and edge attributes: list.vertex.attributes(net_2) ## [1] &quot;na&quot; &quot;vertex.names&quot; list.edge.attributes(net_2) ## [1] &quot;na&quot; # The built-in &quot;na&quot; attribute tells you if a vertex/edge is &quot;missing&quot; or not. # This refers to missing data, not if an edge is present or absent: get.vertex.attribute(net_2, &quot;na&quot;) ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE get.edge.attribute(net_2, &quot;na&quot;) ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [25] FALSE FALSE FALSE FALSE FALSE # The vertex names (ids): get.vertex.attribute(net_2, &quot;vertex.names&quot;) ## [1] 1 2 3 4 5 6 7 8 9 10 I guess that the names could be anything, e.g., if it reflected a friendship network, then the names could be actual names. # We can also add attributes: set.edge.attribute(net_2, &quot;new-attribute&quot;, 77) list.edge.attributes(net_2) ## [1] &quot;na&quot; &quot;new-attribute&quot; # We can use either of the two to get the attribute values: get.edge.attribute(net_2, &quot;new-attribute&quot;) ## [1] 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 ## [26] 77 77 77 77 get.edge.value(net_2, &quot;new-attribute&quot;) ## [1] 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 77 ## [26] 77 77 77 77 # Add a &quot;gender&quot; attribute for each vertex: gender &lt;- c(2,1,2,2,1,2,1,1,2,2) set.vertex.attribute(net_2, &quot;gender&quot;, gender) list.vertex.attributes(net_2) ## [1] &quot;gender&quot; &quot;na&quot; &quot;vertex.names&quot; get.vertex.attribute(net_2, &quot;gender&quot;) ## [1] 2 1 2 2 1 2 1 1 2 2 Basically what we do with the attributes are to encapsule information in the vertices. So it could also be age, adress, mail etc. # Change the vertex names: names &lt;- c(&quot;John&quot;, &quot;Mary&quot;, &quot;Tom&quot;, &quot;Bob&quot;, &quot;Ann&quot;, &quot;Pete&quot;, &quot;Kate&quot;, &quot;Jill&quot;, &quot;George&quot;, &quot;Tim&quot;) set.vertex.attribute(net_2, &quot;vertex.names&quot;, names) get.vertex.attribute(net_2, &quot;vertex.names&quot;) ## [1] &quot;John&quot; &quot;Mary&quot; &quot;Tom&quot; &quot;Bob&quot; &quot;Ann&quot; &quot;Pete&quot; &quot;Kate&quot; &quot;Jill&quot; ## [9] &quot;George&quot; &quot;Tim&quot; summary(net_2) ## Network attributes: ## vertices = 10 ## directed = TRUE ## hyper = FALSE ## loops = FALSE ## multiple = FALSE ## bipartite = FALSE ## total edges = 29 ## missing edges = 0 ## non-missing edges = 29 ## density = 0.3222222 ## ## Vertex attributes: ## ## gender: ## numeric valued attribute ## attribute summary: ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.0 1.0 2.0 1.6 2.0 2.0 ## vertex.names: ## character valued attribute ## 10 valid vertex names ## ## Edge attributes: ## ## new-attribute: ## numeric valued attribute ## attribute summary: ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 77 77 77 77 77 77 ## ## Network adjacency matrix: ## John Mary Tom Bob Ann Pete Kate Jill George Tim ## John 0 1 1 1 1 1 1 1 1 1 ## Mary 0 0 0 0 1 0 0 0 1 0 ## Tom 0 0 0 0 1 0 0 0 0 0 ## Bob 1 0 1 0 0 0 1 0 0 0 ## Ann 0 0 0 1 0 0 0 0 0 0 ## Pete 1 0 1 0 1 0 0 1 1 1 ## Kate 0 1 0 0 0 0 0 0 1 1 ## Jill 0 1 1 0 0 0 0 0 0 0 ## George 0 0 0 0 0 1 0 0 0 0 ## Tim 0 0 0 0 0 0 0 1 0 0 Now we see the names are added to the adjecency matrix. # Add a &quot;year&quot; attribute to the network: set.network.attribute(net_2, &quot;year&quot;, 2008) list.network.attributes(net_2) ## [1] &quot;bipartite&quot; &quot;directed&quot; &quot;hyper&quot; &quot;loops&quot; &quot;mnext&quot; &quot;multiple&quot; ## [7] &quot;n&quot; &quot;year&quot; get.network.attribute(net_2, &quot;year&quot;) ## [1] 2008 So I guess, that this means to we add information to the overall model, hence could be date of creation or version. # Change the network to undirected by changing the &quot;directed&quot; attribute: set.network.attribute(net_2, &quot;directed&quot;, F) summary(net_2) ## Network attributes: ## vertices = 10 ## directed = FALSE ## hyper = FALSE ## loops = FALSE ## multiple = FALSE ## bipartite = FALSE ## year = 2008 ## total edges = 29 ## missing edges = 0 ## non-missing edges = 29 ## density = 0.6444444 ## ## Vertex attributes: ## ## gender: ## numeric valued attribute ## attribute summary: ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.0 1.0 2.0 1.6 2.0 2.0 ## vertex.names: ## character valued attribute ## 10 valid vertex names ## ## Edge attributes: ## ## new-attribute: ## numeric valued attribute ## attribute summary: ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 77 77 77 77 77 77 ## ## Network adjacency matrix: ## John Mary Tom Bob Ann Pete Kate Jill George Tim ## John 0 1 1 1 1 1 1 1 1 1 ## Mary 1 0 0 0 1 0 1 1 1 0 ## Tom 1 0 0 1 1 1 0 1 0 0 ## Bob 1 0 1 0 1 0 1 0 0 0 ## Ann 1 1 1 1 0 1 0 0 0 0 ## Pete 1 0 1 0 1 0 0 1 1 1 ## Kate 1 1 0 1 0 0 0 0 1 1 ## Jill 1 1 1 0 0 1 0 0 0 1 ## George 1 1 0 0 0 1 1 0 0 0 ## Tim 1 0 0 0 0 1 1 1 0 0 plot(net_2) # You can also delete attributes: delete.network.attribute(net_2,&quot;year&quot;) delete.edge.attribute(net_2,&quot;new-attribute&quot;) delete.vertex.attribute(net_2,&quot;gender&quot;) We are now going to use a new operator: %n%, %e%, %v% = Various operators which allow extraction or replacement of various components of a network object. In general n = network e = edge v = vertices # We can also get and set attributes using shorthand operators: net_2 %n% &quot;year&quot; &lt;- 2009 # %n% is for network net_2 %n% &quot;year&quot; ## [1] 2009 net_2 %e% &quot;new-attribute&quot; &lt;- 88 # %e% for edges. net_2 %e% &quot;new-attribute&quot; ## [1] 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 ## [26] 88 88 88 88 net_2 %v% &quot;gender&quot; &lt;- gender # %v% for vertices. net_2 %v% &quot;gender&quot; ## [1] 2 1 2 2 1 2 1 1 2 2 summary(net_2) ## Network attributes: ## vertices = 10 ## directed = FALSE ## hyper = FALSE ## loops = FALSE ## multiple = FALSE ## bipartite = FALSE ## year = 2009 ## total edges = 29 ## missing edges = 0 ## non-missing edges = 29 ## density = 0.6444444 ## ## Vertex attributes: ## ## gender: ## numeric valued attribute ## attribute summary: ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.0 1.0 2.0 1.6 2.0 2.0 ## vertex.names: ## character valued attribute ## 10 valid vertex names ## ## Edge attributes: ## ## new-attribute: ## numeric valued attribute ## attribute summary: ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 88 88 88 88 88 88 ## ## Network adjacency matrix: ## John Mary Tom Bob Ann Pete Kate Jill George Tim ## John 0 1 1 1 1 1 1 1 1 1 ## Mary 1 0 0 0 1 0 1 1 1 0 ## Tom 1 0 0 1 1 1 0 1 0 0 ## Bob 1 0 1 0 1 0 1 0 0 0 ## Ann 1 1 1 1 0 1 0 0 0 0 ## Pete 1 0 1 0 1 0 0 1 1 1 ## Kate 1 1 0 1 0 0 0 0 1 1 ## Jill 1 1 1 0 0 1 0 0 0 1 ## George 1 1 0 0 0 1 1 0 0 0 ## Tim 1 0 0 0 0 1 1 1 0 0 "],["visualizations.html", "2.2 Visualizations", " 2.2 Visualizations 2.2.1 Preliminaries # Loading the necessary libraries: library(sna) 2.2.2 Importing the data # Import the data: campnet &lt;- read.csv(file=&quot;Data/2b - campnet.csv&quot;, header=T, row.names=1, as.is=T) # See the first few columns of the data: head(campnet) HOLLY BRAZEY CAROL PAM PAT JENNIE PAULINE ANN MICHAEL BILL LEE DON JOHN HARRY GERY STEVE BERT RUSS HOLLY 0 0 0 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0 BRAZEY 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 CAROL 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 PAM 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 PAT 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 JENNIE 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 # The campnet dataset contains interactions among 18 people participating in a workshop (including 4 instructors). # An edge from vertex i to j indicates that person i listed person j as one of their top three interactors. # Reading in the attributes: campnet.attr &lt;- read.csv(file=&quot;Data/2c - campnet_attr.csv&quot;, header=T, as.is=T) campnet.attr Name Gender Role Combo HOLLY 1 1 1 BRAZEY 1 1 1 CAROL 1 1 1 PAM 1 1 1 PAT 1 1 1 JENNIE 1 1 1 PAULINE 1 1 1 ANN 1 1 1 MICHAEL 2 1 2 BILL 2 1 2 LEE 2 1 2 DON 2 1 2 JOHN 2 1 2 HARRY 2 1 2 GERY 2 2 3 STEVE 2 2 3 BERT 2 2 3 RUSS 2 2 3 The attributes are: Gender: 1: female, 2: male Role: 1: participant, 2: instructor Combo: 1: female, 2: male, 3: instructor (all males) # Set up the adjacency matrix and network: A = as.matrix(campnet) camp_net &lt;- network(A) summary(camp_net) ## Network attributes: ## vertices = 18 ## directed = TRUE ## hyper = FALSE ## loops = FALSE ## multiple = FALSE ## bipartite = FALSE ## total edges = 54 ## missing edges = 0 ## non-missing edges = 54 ## density = 0.1764706 ## ## Vertex attributes: ## vertex.names: ## character valued attribute ## 18 valid vertex names ## ## No edge attributes ## ## Network edgelist matrix: ## [,1] [,2] ## [1,] 5 1 ## [2,] 9 1 ## [3,] 12 1 ## [4,] 14 1 ## [5,] 11 2 ## [6,] 5 3 ## [7,] 7 3 ## [8,] 1 4 ## [9,] 3 4 ## [10,] 6 4 ## [11,] 7 4 ## [12,] 8 4 ## [13,] 1 5 ## [14,] 3 5 ## [15,] 6 5 ## [16,] 7 5 ## [17,] 4 6 ## [18,] 5 6 ## [19,] 8 6 ## [20,] 3 7 ## [21,] 4 7 ## [22,] 8 7 ## [23,] 13 7 ## [24,] 4 8 ## [25,] 6 8 ## [26,] 10 9 ## [27,] 12 9 ## [28,] 14 9 ## [29,] 15 9 ## [30,] 2 11 ## [31,] 16 11 ## [32,] 17 11 ## [33,] 1 12 ## [34,] 9 12 ## [35,] 10 12 ## [36,] 14 12 ## [37,] 9 14 ## [38,] 10 14 ## [39,] 12 14 ## [40,] 13 15 ## [41,] 18 15 ## [42,] 2 16 ## [43,] 11 16 ## [44,] 15 16 ## [45,] 17 16 ## [46,] 18 16 ## [47,] 2 17 ## [48,] 11 17 ## [49,] 16 17 ## [50,] 18 17 ## [51,] 13 18 ## [52,] 15 18 ## [53,] 16 18 ## [54,] 17 18 2.2.3 Visualising the network # We can use the basic plot function to visualise the network: plot(camp_net) # sna also has the more flexible gplot function: gplot(camp_net ,mode = &quot;fruchtermanreingold&quot; # The &quot;mode&quot; parameter selects the network layout. ,displaylabels = T # &quot;displaylabels&quot; shows the vertex labels. ,label.cex = 0.5 # label.cex = 0.5 sets the vertex label size to 0.5 of the default size. ,label.col=&quot;blue&quot;) # label.col = &quot;blue&quot; sets the color of all the labels to blue. For a list of layouts, see: https://www.rdocumentation.org/packages/sna/versions/2.5/topics/gplot.layout or page 86 of https://cran.r-project.org/web/packages/sna/sna.pdf. Try for example circle, eigen, kamadakawaii, mds and spring. # Next we colour the vertices by gender: modes &lt;- c(&quot;adj&quot;,&quot;circle&quot;,&quot;circrand&quot;,&quot;eigen&quot;,&quot;fruchtermanreingold&quot;,&quot;geodist&quot;,&quot;hall&quot;,&quot;kamadakawai&quot;,&quot;mds&quot;,&quot;princoord&quot;,&quot;random&quot;,&quot;rmds&quot;,&quot;segeo&quot;,&quot;seham&quot;,&quot;spring&quot;,&quot;springrepulse&quot;,&quot;target&quot;) for (i in modes) { gplot(camp_net ,mode = i #The network layout ,displaylabels = T ,label.cex = 0.5 ,label.col = &quot;blue&quot; ,vertex.col = campnet.attr$Gender ,main = i) } Notice that we have something of a community structure in this network. # We can also ask R for specific colours for gender. First let&#39;s check out the colour names that R knows about: colors() ## [1] &quot;white&quot; &quot;aliceblue&quot; &quot;antiquewhite&quot; ## [4] &quot;antiquewhite1&quot; &quot;antiquewhite2&quot; &quot;antiquewhite3&quot; ## [7] &quot;antiquewhite4&quot; &quot;aquamarine&quot; &quot;aquamarine1&quot; ## [10] &quot;aquamarine2&quot; &quot;aquamarine3&quot; &quot;aquamarine4&quot; ## [13] &quot;azure&quot; &quot;azure1&quot; &quot;azure2&quot; ## [16] &quot;azure3&quot; &quot;azure4&quot; &quot;beige&quot; ## [19] &quot;bisque&quot; &quot;bisque1&quot; &quot;bisque2&quot; ## [22] &quot;bisque3&quot; &quot;bisque4&quot; &quot;black&quot; ## [25] &quot;blanchedalmond&quot; &quot;blue&quot; &quot;blue1&quot; ## [28] &quot;blue2&quot; &quot;blue3&quot; &quot;blue4&quot; ## [31] &quot;blueviolet&quot; &quot;brown&quot; &quot;brown1&quot; ## [34] &quot;brown2&quot; &quot;brown3&quot; &quot;brown4&quot; ## [37] &quot;burlywood&quot; &quot;burlywood1&quot; &quot;burlywood2&quot; ## [40] &quot;burlywood3&quot; &quot;burlywood4&quot; &quot;cadetblue&quot; ## [43] &quot;cadetblue1&quot; &quot;cadetblue2&quot; &quot;cadetblue3&quot; ## [46] &quot;cadetblue4&quot; &quot;chartreuse&quot; &quot;chartreuse1&quot; ## [49] &quot;chartreuse2&quot; &quot;chartreuse3&quot; &quot;chartreuse4&quot; ## [52] &quot;chocolate&quot; &quot;chocolate1&quot; &quot;chocolate2&quot; ## [55] &quot;chocolate3&quot; &quot;chocolate4&quot; &quot;coral&quot; ## [58] &quot;coral1&quot; &quot;coral2&quot; &quot;coral3&quot; ## [61] &quot;coral4&quot; &quot;cornflowerblue&quot; &quot;cornsilk&quot; ## [64] &quot;cornsilk1&quot; &quot;cornsilk2&quot; &quot;cornsilk3&quot; ## [67] &quot;cornsilk4&quot; &quot;cyan&quot; &quot;cyan1&quot; ## [70] &quot;cyan2&quot; &quot;cyan3&quot; &quot;cyan4&quot; ## [73] &quot;darkblue&quot; &quot;darkcyan&quot; &quot;darkgoldenrod&quot; ## [76] &quot;darkgoldenrod1&quot; &quot;darkgoldenrod2&quot; &quot;darkgoldenrod3&quot; ## [79] &quot;darkgoldenrod4&quot; &quot;darkgray&quot; &quot;darkgreen&quot; ## [82] &quot;darkgrey&quot; &quot;darkkhaki&quot; &quot;darkmagenta&quot; ## [85] &quot;darkolivegreen&quot; &quot;darkolivegreen1&quot; &quot;darkolivegreen2&quot; ## [88] &quot;darkolivegreen3&quot; &quot;darkolivegreen4&quot; &quot;darkorange&quot; ## [91] &quot;darkorange1&quot; &quot;darkorange2&quot; &quot;darkorange3&quot; ## [94] &quot;darkorange4&quot; &quot;darkorchid&quot; &quot;darkorchid1&quot; ## [97] &quot;darkorchid2&quot; &quot;darkorchid3&quot; &quot;darkorchid4&quot; ## [100] &quot;darkred&quot; &quot;darksalmon&quot; &quot;darkseagreen&quot; ## [103] &quot;darkseagreen1&quot; &quot;darkseagreen2&quot; &quot;darkseagreen3&quot; ## [106] &quot;darkseagreen4&quot; &quot;darkslateblue&quot; &quot;darkslategray&quot; ## [109] &quot;darkslategray1&quot; &quot;darkslategray2&quot; &quot;darkslategray3&quot; ## [112] &quot;darkslategray4&quot; &quot;darkslategrey&quot; &quot;darkturquoise&quot; ## [115] &quot;darkviolet&quot; &quot;deeppink&quot; &quot;deeppink1&quot; ## [118] &quot;deeppink2&quot; &quot;deeppink3&quot; &quot;deeppink4&quot; ## [121] &quot;deepskyblue&quot; &quot;deepskyblue1&quot; &quot;deepskyblue2&quot; ## [124] &quot;deepskyblue3&quot; &quot;deepskyblue4&quot; &quot;dimgray&quot; ## [127] &quot;dimgrey&quot; &quot;dodgerblue&quot; &quot;dodgerblue1&quot; ## [130] &quot;dodgerblue2&quot; &quot;dodgerblue3&quot; &quot;dodgerblue4&quot; ## [133] &quot;firebrick&quot; &quot;firebrick1&quot; &quot;firebrick2&quot; ## [136] &quot;firebrick3&quot; &quot;firebrick4&quot; &quot;floralwhite&quot; ## [139] &quot;forestgreen&quot; &quot;gainsboro&quot; &quot;ghostwhite&quot; ## [142] &quot;gold&quot; &quot;gold1&quot; &quot;gold2&quot; ## [145] &quot;gold3&quot; &quot;gold4&quot; &quot;goldenrod&quot; ## [148] &quot;goldenrod1&quot; &quot;goldenrod2&quot; &quot;goldenrod3&quot; ## [151] &quot;goldenrod4&quot; &quot;gray&quot; &quot;gray0&quot; ## [154] &quot;gray1&quot; &quot;gray2&quot; &quot;gray3&quot; ## [157] &quot;gray4&quot; &quot;gray5&quot; &quot;gray6&quot; ## [160] &quot;gray7&quot; &quot;gray8&quot; &quot;gray9&quot; ## [163] &quot;gray10&quot; &quot;gray11&quot; &quot;gray12&quot; ## [166] &quot;gray13&quot; &quot;gray14&quot; &quot;gray15&quot; ## [169] &quot;gray16&quot; &quot;gray17&quot; &quot;gray18&quot; ## [172] &quot;gray19&quot; &quot;gray20&quot; &quot;gray21&quot; ## [175] &quot;gray22&quot; &quot;gray23&quot; &quot;gray24&quot; ## [178] &quot;gray25&quot; &quot;gray26&quot; &quot;gray27&quot; ## [181] &quot;gray28&quot; &quot;gray29&quot; &quot;gray30&quot; ## [184] &quot;gray31&quot; &quot;gray32&quot; &quot;gray33&quot; ## [187] &quot;gray34&quot; &quot;gray35&quot; &quot;gray36&quot; ## [190] &quot;gray37&quot; &quot;gray38&quot; &quot;gray39&quot; ## [193] &quot;gray40&quot; &quot;gray41&quot; &quot;gray42&quot; ## [196] &quot;gray43&quot; &quot;gray44&quot; &quot;gray45&quot; ## [199] &quot;gray46&quot; &quot;gray47&quot; &quot;gray48&quot; ## [202] &quot;gray49&quot; &quot;gray50&quot; &quot;gray51&quot; ## [205] &quot;gray52&quot; &quot;gray53&quot; &quot;gray54&quot; ## [208] &quot;gray55&quot; &quot;gray56&quot; &quot;gray57&quot; ## [211] &quot;gray58&quot; &quot;gray59&quot; &quot;gray60&quot; ## [214] &quot;gray61&quot; &quot;gray62&quot; &quot;gray63&quot; ## [217] &quot;gray64&quot; &quot;gray65&quot; &quot;gray66&quot; ## [220] &quot;gray67&quot; &quot;gray68&quot; &quot;gray69&quot; ## [223] &quot;gray70&quot; &quot;gray71&quot; &quot;gray72&quot; ## [226] &quot;gray73&quot; &quot;gray74&quot; &quot;gray75&quot; ## [229] &quot;gray76&quot; &quot;gray77&quot; &quot;gray78&quot; ## [232] &quot;gray79&quot; &quot;gray80&quot; &quot;gray81&quot; ## [235] &quot;gray82&quot; &quot;gray83&quot; &quot;gray84&quot; ## [238] &quot;gray85&quot; &quot;gray86&quot; &quot;gray87&quot; ## [241] &quot;gray88&quot; &quot;gray89&quot; &quot;gray90&quot; ## [244] &quot;gray91&quot; &quot;gray92&quot; &quot;gray93&quot; ## [247] &quot;gray94&quot; &quot;gray95&quot; &quot;gray96&quot; ## [250] &quot;gray97&quot; &quot;gray98&quot; &quot;gray99&quot; ## [253] &quot;gray100&quot; &quot;green&quot; &quot;green1&quot; ## [256] &quot;green2&quot; &quot;green3&quot; &quot;green4&quot; ## [259] &quot;greenyellow&quot; &quot;grey&quot; &quot;grey0&quot; ## [262] &quot;grey1&quot; &quot;grey2&quot; &quot;grey3&quot; ## [265] &quot;grey4&quot; &quot;grey5&quot; &quot;grey6&quot; ## [268] &quot;grey7&quot; &quot;grey8&quot; &quot;grey9&quot; ## [271] &quot;grey10&quot; &quot;grey11&quot; &quot;grey12&quot; ## [274] &quot;grey13&quot; &quot;grey14&quot; &quot;grey15&quot; ## [277] &quot;grey16&quot; &quot;grey17&quot; &quot;grey18&quot; ## [280] &quot;grey19&quot; &quot;grey20&quot; &quot;grey21&quot; ## [283] &quot;grey22&quot; &quot;grey23&quot; &quot;grey24&quot; ## [286] &quot;grey25&quot; &quot;grey26&quot; &quot;grey27&quot; ## [289] &quot;grey28&quot; &quot;grey29&quot; &quot;grey30&quot; ## [292] &quot;grey31&quot; &quot;grey32&quot; &quot;grey33&quot; ## [295] &quot;grey34&quot; &quot;grey35&quot; &quot;grey36&quot; ## [298] &quot;grey37&quot; &quot;grey38&quot; &quot;grey39&quot; ## [301] &quot;grey40&quot; &quot;grey41&quot; &quot;grey42&quot; ## [304] &quot;grey43&quot; &quot;grey44&quot; &quot;grey45&quot; ## [307] &quot;grey46&quot; &quot;grey47&quot; &quot;grey48&quot; ## [310] &quot;grey49&quot; &quot;grey50&quot; &quot;grey51&quot; ## [313] &quot;grey52&quot; &quot;grey53&quot; &quot;grey54&quot; ## [316] &quot;grey55&quot; &quot;grey56&quot; &quot;grey57&quot; ## [319] &quot;grey58&quot; &quot;grey59&quot; &quot;grey60&quot; ## [322] &quot;grey61&quot; &quot;grey62&quot; &quot;grey63&quot; ## [325] &quot;grey64&quot; &quot;grey65&quot; &quot;grey66&quot; ## [328] &quot;grey67&quot; &quot;grey68&quot; &quot;grey69&quot; ## [331] &quot;grey70&quot; &quot;grey71&quot; &quot;grey72&quot; ## [334] &quot;grey73&quot; &quot;grey74&quot; &quot;grey75&quot; ## [337] &quot;grey76&quot; &quot;grey77&quot; &quot;grey78&quot; ## [340] &quot;grey79&quot; &quot;grey80&quot; &quot;grey81&quot; ## [343] &quot;grey82&quot; &quot;grey83&quot; &quot;grey84&quot; ## [346] &quot;grey85&quot; &quot;grey86&quot; &quot;grey87&quot; ## [349] &quot;grey88&quot; &quot;grey89&quot; &quot;grey90&quot; ## [352] &quot;grey91&quot; &quot;grey92&quot; &quot;grey93&quot; ## [355] &quot;grey94&quot; &quot;grey95&quot; &quot;grey96&quot; ## [358] &quot;grey97&quot; &quot;grey98&quot; &quot;grey99&quot; ## [361] &quot;grey100&quot; &quot;honeydew&quot; &quot;honeydew1&quot; ## [364] &quot;honeydew2&quot; &quot;honeydew3&quot; &quot;honeydew4&quot; ## [367] &quot;hotpink&quot; &quot;hotpink1&quot; &quot;hotpink2&quot; ## [370] &quot;hotpink3&quot; &quot;hotpink4&quot; &quot;indianred&quot; ## [373] &quot;indianred1&quot; &quot;indianred2&quot; &quot;indianred3&quot; ## [376] &quot;indianred4&quot; &quot;ivory&quot; &quot;ivory1&quot; ## [379] &quot;ivory2&quot; &quot;ivory3&quot; &quot;ivory4&quot; ## [382] &quot;khaki&quot; &quot;khaki1&quot; &quot;khaki2&quot; ## [385] &quot;khaki3&quot; &quot;khaki4&quot; &quot;lavender&quot; ## [388] &quot;lavenderblush&quot; &quot;lavenderblush1&quot; &quot;lavenderblush2&quot; ## [391] &quot;lavenderblush3&quot; &quot;lavenderblush4&quot; &quot;lawngreen&quot; ## [394] &quot;lemonchiffon&quot; &quot;lemonchiffon1&quot; &quot;lemonchiffon2&quot; ## [397] &quot;lemonchiffon3&quot; &quot;lemonchiffon4&quot; &quot;lightblue&quot; ## [400] &quot;lightblue1&quot; &quot;lightblue2&quot; &quot;lightblue3&quot; ## [403] &quot;lightblue4&quot; &quot;lightcoral&quot; &quot;lightcyan&quot; ## [406] &quot;lightcyan1&quot; &quot;lightcyan2&quot; &quot;lightcyan3&quot; ## [409] &quot;lightcyan4&quot; &quot;lightgoldenrod&quot; &quot;lightgoldenrod1&quot; ## [412] &quot;lightgoldenrod2&quot; &quot;lightgoldenrod3&quot; &quot;lightgoldenrod4&quot; ## [415] &quot;lightgoldenrodyellow&quot; &quot;lightgray&quot; &quot;lightgreen&quot; ## [418] &quot;lightgrey&quot; &quot;lightpink&quot; &quot;lightpink1&quot; ## [421] &quot;lightpink2&quot; &quot;lightpink3&quot; &quot;lightpink4&quot; ## [424] &quot;lightsalmon&quot; &quot;lightsalmon1&quot; &quot;lightsalmon2&quot; ## [427] &quot;lightsalmon3&quot; &quot;lightsalmon4&quot; &quot;lightseagreen&quot; ## [430] &quot;lightskyblue&quot; &quot;lightskyblue1&quot; &quot;lightskyblue2&quot; ## [433] &quot;lightskyblue3&quot; &quot;lightskyblue4&quot; &quot;lightslateblue&quot; ## [436] &quot;lightslategray&quot; &quot;lightslategrey&quot; &quot;lightsteelblue&quot; ## [439] &quot;lightsteelblue1&quot; &quot;lightsteelblue2&quot; &quot;lightsteelblue3&quot; ## [442] &quot;lightsteelblue4&quot; &quot;lightyellow&quot; &quot;lightyellow1&quot; ## [445] &quot;lightyellow2&quot; &quot;lightyellow3&quot; &quot;lightyellow4&quot; ## [448] &quot;limegreen&quot; &quot;linen&quot; &quot;magenta&quot; ## [451] &quot;magenta1&quot; &quot;magenta2&quot; &quot;magenta3&quot; ## [454] &quot;magenta4&quot; &quot;maroon&quot; &quot;maroon1&quot; ## [457] &quot;maroon2&quot; &quot;maroon3&quot; &quot;maroon4&quot; ## [460] &quot;mediumaquamarine&quot; &quot;mediumblue&quot; &quot;mediumorchid&quot; ## [463] &quot;mediumorchid1&quot; &quot;mediumorchid2&quot; &quot;mediumorchid3&quot; ## [466] &quot;mediumorchid4&quot; &quot;mediumpurple&quot; &quot;mediumpurple1&quot; ## [469] &quot;mediumpurple2&quot; &quot;mediumpurple3&quot; &quot;mediumpurple4&quot; ## [472] &quot;mediumseagreen&quot; &quot;mediumslateblue&quot; &quot;mediumspringgreen&quot; ## [475] &quot;mediumturquoise&quot; &quot;mediumvioletred&quot; &quot;midnightblue&quot; ## [478] &quot;mintcream&quot; &quot;mistyrose&quot; &quot;mistyrose1&quot; ## [481] &quot;mistyrose2&quot; &quot;mistyrose3&quot; &quot;mistyrose4&quot; ## [484] &quot;moccasin&quot; &quot;navajowhite&quot; &quot;navajowhite1&quot; ## [487] &quot;navajowhite2&quot; &quot;navajowhite3&quot; &quot;navajowhite4&quot; ## [490] &quot;navy&quot; &quot;navyblue&quot; &quot;oldlace&quot; ## [493] &quot;olivedrab&quot; &quot;olivedrab1&quot; &quot;olivedrab2&quot; ## [496] &quot;olivedrab3&quot; &quot;olivedrab4&quot; &quot;orange&quot; ## [499] &quot;orange1&quot; &quot;orange2&quot; &quot;orange3&quot; ## [502] &quot;orange4&quot; &quot;orangered&quot; &quot;orangered1&quot; ## [505] &quot;orangered2&quot; &quot;orangered3&quot; &quot;orangered4&quot; ## [508] &quot;orchid&quot; &quot;orchid1&quot; &quot;orchid2&quot; ## [511] &quot;orchid3&quot; &quot;orchid4&quot; &quot;palegoldenrod&quot; ## [514] &quot;palegreen&quot; &quot;palegreen1&quot; &quot;palegreen2&quot; ## [517] &quot;palegreen3&quot; &quot;palegreen4&quot; &quot;paleturquoise&quot; ## [520] &quot;paleturquoise1&quot; &quot;paleturquoise2&quot; &quot;paleturquoise3&quot; ## [523] &quot;paleturquoise4&quot; &quot;palevioletred&quot; &quot;palevioletred1&quot; ## [526] &quot;palevioletred2&quot; &quot;palevioletred3&quot; &quot;palevioletred4&quot; ## [529] &quot;papayawhip&quot; &quot;peachpuff&quot; &quot;peachpuff1&quot; ## [532] &quot;peachpuff2&quot; &quot;peachpuff3&quot; &quot;peachpuff4&quot; ## [535] &quot;peru&quot; &quot;pink&quot; &quot;pink1&quot; ## [538] &quot;pink2&quot; &quot;pink3&quot; &quot;pink4&quot; ## [541] &quot;plum&quot; &quot;plum1&quot; &quot;plum2&quot; ## [544] &quot;plum3&quot; &quot;plum4&quot; &quot;powderblue&quot; ## [547] &quot;purple&quot; &quot;purple1&quot; &quot;purple2&quot; ## [550] &quot;purple3&quot; &quot;purple4&quot; &quot;red&quot; ## [553] &quot;red1&quot; &quot;red2&quot; &quot;red3&quot; ## [556] &quot;red4&quot; &quot;rosybrown&quot; &quot;rosybrown1&quot; ## [559] &quot;rosybrown2&quot; &quot;rosybrown3&quot; &quot;rosybrown4&quot; ## [562] &quot;royalblue&quot; &quot;royalblue1&quot; &quot;royalblue2&quot; ## [565] &quot;royalblue3&quot; &quot;royalblue4&quot; &quot;saddlebrown&quot; ## [568] &quot;salmon&quot; &quot;salmon1&quot; &quot;salmon2&quot; ## [571] &quot;salmon3&quot; &quot;salmon4&quot; &quot;sandybrown&quot; ## [574] &quot;seagreen&quot; &quot;seagreen1&quot; &quot;seagreen2&quot; ## [577] &quot;seagreen3&quot; &quot;seagreen4&quot; &quot;seashell&quot; ## [580] &quot;seashell1&quot; &quot;seashell2&quot; &quot;seashell3&quot; ## [583] &quot;seashell4&quot; &quot;sienna&quot; &quot;sienna1&quot; ## [586] &quot;sienna2&quot; &quot;sienna3&quot; &quot;sienna4&quot; ## [589] &quot;skyblue&quot; &quot;skyblue1&quot; &quot;skyblue2&quot; ## [592] &quot;skyblue3&quot; &quot;skyblue4&quot; &quot;slateblue&quot; ## [595] &quot;slateblue1&quot; &quot;slateblue2&quot; &quot;slateblue3&quot; ## [598] &quot;slateblue4&quot; &quot;slategray&quot; &quot;slategray1&quot; ## [601] &quot;slategray2&quot; &quot;slategray3&quot; &quot;slategray4&quot; ## [604] &quot;slategrey&quot; &quot;snow&quot; &quot;snow1&quot; ## [607] &quot;snow2&quot; &quot;snow3&quot; &quot;snow4&quot; ## [610] &quot;springgreen&quot; &quot;springgreen1&quot; &quot;springgreen2&quot; ## [613] &quot;springgreen3&quot; &quot;springgreen4&quot; &quot;steelblue&quot; ## [616] &quot;steelblue1&quot; &quot;steelblue2&quot; &quot;steelblue3&quot; ## [619] &quot;steelblue4&quot; &quot;tan&quot; &quot;tan1&quot; ## [622] &quot;tan2&quot; &quot;tan3&quot; &quot;tan4&quot; ## [625] &quot;thistle&quot; &quot;thistle1&quot; &quot;thistle2&quot; ## [628] &quot;thistle3&quot; &quot;thistle4&quot; &quot;tomato&quot; ## [631] &quot;tomato1&quot; &quot;tomato2&quot; &quot;tomato3&quot; ## [634] &quot;tomato4&quot; &quot;turquoise&quot; &quot;turquoise1&quot; ## [637] &quot;turquoise2&quot; &quot;turquoise3&quot; &quot;turquoise4&quot; ## [640] &quot;violet&quot; &quot;violetred&quot; &quot;violetred1&quot; ## [643] &quot;violetred2&quot; &quot;violetred3&quot; &quot;violetred4&quot; ## [646] &quot;wheat&quot; &quot;wheat1&quot; &quot;wheat2&quot; ## [649] &quot;wheat3&quot; &quot;wheat4&quot; &quot;whitesmoke&quot; ## [652] &quot;yellow&quot; &quot;yellow1&quot; &quot;yellow2&quot; ## [655] &quot;yellow3&quot; &quot;yellow4&quot; &quot;yellowgreen&quot; # Create a vector of colours depending on gender: vertex_colours &lt;- ifelse(campnet.attr$Gender==&quot;1&quot;,&quot;yellow&quot;,&quot;green&quot;) # Then we plot: gplot(camp_net, mode=&quot;fruchtermanreingold&quot;, displaylabels=T, label.cex=0.5, label.col=&quot;blue&quot;, vertex.col=vertex_colours) # Notice that if we run the same command again, the vertex layout typically changes: gplot(camp_net, mode=&quot;fruchtermanreingold&quot;, displaylabels=T, label.cex=0.5, label.col=&quot;blue&quot;, vertex.col=vertex_colours) # This is normal, many layout algorithms return slightly different layouts upon repeated runs. However, suppose we want to # visualise the same network with different colourings. Then we want the vertices to be in the same place in all the figures. # We can save the layout coordinates: layout_coordinates &lt;- gplot(camp_net, mode=&quot;fruchtermanreingold&quot;, displaylabels=T, label.cex=0.5, label.col=&quot;blue&quot;, vertex.col=vertex_colours) # Then we can plot again using the same coordinates: gplot(camp_net, displaylabels=T, label.cex=0.5, label.col=&quot;blue&quot;, vertex.col=campnet.attr$Role, coord = layout_coordinates, vertex.cex = 3) # Examine the help file to find many more parameters controlling network visualisation: ?sna::gplot The following starts an PDF document, where we save plots in it. It is saved on the working directory # To save the plot to file, we first start a graphic device for PDFs, plot, and finally close the PDF device: pdf(&quot;test.pdf&quot;) gplot(camp_net, displaylabels=T, label.cex=0.5, label.col=&quot;blue&quot;, vertex.col=vertex_colours, coord=layout_coordinates) dev.off() ## quartz_off_screen ## 2 "]]
